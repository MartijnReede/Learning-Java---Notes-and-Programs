In this lesson we dig a little deeper into algorithm analysis and big O notation.

********** BIG O NOTATIONS **********
O(1)	= 	Constant time		- Will execute immediately.
O(n) 	= 	Linear			- Amount of iterations needed equals input size. 
O(n2) 	= 	Quadratic		- Loop inside a loop. Amount of iterations needed is input size * input size. 
O(n3)	= 	Cubic			- Loop inside a loop inside a loop. Iterations needed: input size * input size * input size
O(Cn)	= 	Exponential		- n loops

******* BINARY SEARCH NOTATION *******
O(log n)	= logarithmic	- 1 loop +- 6 iterations needed. 

******* ANALYSE EFFICIENCY OF METHOD *********

C = constant time.
n = input size;

Below I've wrote a method. We can analyse this by:

	public int showFirstBadWay(int[] args){
		
				C1        C1             C1        = 3C(n)     -->This will execute each iteration so 3C's times n (input size). 
		for (int i = 0; i< args.length; i++){
			int temp = args[i];		C1			   = 1C(n)
		}
		
		1C			--> will only execute once.
		int j = 0;
		
		1C			--> will only execute once.
		return args[0];	

So, the efficiency of this method can be written down as:   4C(n) + 2C

What really matters in this method is the size of n. If this is a million, it is going to slow down the method drastically. 
Since this method has only one loop, we don't write the complexity by 4C(n) + 2C but as O(n);

*********** ANOTHER METHOD **********

The method below doesn't do anything actually but, we can write the complexity as: 

	public void doSomething(int arg){
		int p = arg;			= 1C
		int i = 1;			= 1C
		int j = 1;			= 1C
		j++				= 1C
		}		
		
The complexity of this method can be written down as 4C. This means, no matter how big the input is, it will still run in constant time.
This means the big O notation will be: O(1).

*********** ANOTHER METHOD ***********		

The method below will be quadratic.

	public void drive(int n){
		int p = 10;			= 1C
		int i = 1;			= 1C
		while (i < n) {			= 1C(n)
			int j = 1;		= 1C(n)
			while (j < i){		= 1C(n2)
			p = p * j;		= 1C(n2)
			j++;			= 1C(n2)
		}
		i++; 				= 1C(n)
	}
}	

This would be: 2C + 3C(n) + 3C(n2) 
The dominating value here is n2. In Big O Notation this would be O(n2)
		
		
********* WORSE CASE ****************

Algorithms should be analyzed by their worse case scenario. This means, if the maximum input could be
a million, we shouldn't analyze it with an input size of 100. 


********* LOGARITMIC ALGORITHM ***********

A logarithmic algorithm is binary search for example...
This can be scaled very, very, very well!

Input size (n)	-	steps(log n)
10			=	4
10.000			=	14
10.000.000		=	24
1.000.000.000		=	30			


		

	
		

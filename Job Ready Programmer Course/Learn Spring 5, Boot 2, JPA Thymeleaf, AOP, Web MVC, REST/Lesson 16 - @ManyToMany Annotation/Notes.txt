@ManyToMany Annotation:
	- This means that: Employees can be assigned to many projects and projects can be assigned to many employees. 
	- In the database, a seperate table needs to be created for this which contains employee_id and project_id.
	- The name for this table is "Intemediary Join Table".

With @ManyToMany, some extra Annotations need to be written down:
	
	PROJECT CLASS:

	@ManyToMany(cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH},
			fetch = FetchType.LAZY)
	@JoinTable(name="product_employee", 
				joinColumns = @JoinColumn(name="project_id"),
				inverseJoinColumns = @JoinColumn(name="Employee_id")
				)
	private List<Employee> employees;

	--------------------------------------------------------------------------

	EMPLOYEE CLASS:

		@ManyToMany(cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH},
				fetch = FetchType.LAZY)
	@JoinTable(name="product_employee", 
			joinColumns = @JoinColumn(name="employee_id"),
			inverseJoinColumns = @JoinColumn(name="project_id")
	)
	private List<Project>projects; 

Of course this means getters and setters need to be changed as well. Also the controller needs to be changed.
But we don't have to do anything besides saving the project or employee. Spring
is smart enough to understand the relationship between those two entities. So, instead of iterating through
a list of employees and assign a projectId to them, we only have to save the project now. 
